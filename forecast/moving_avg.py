# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_moving_avg.ipynb (unless otherwise specified).

__all__ = ['moving_avg', 'mad', 'mse', 'rmse', 'mape', 'cumulative_error', 'change_in_variable', 'change_in_forecast',
           'turning_point_graph']

# Cell
import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt

# Cell
def moving_avg(n_month, df, df_column):
    """
    Get an array of n-month moving averages.

    Arguments:
    n_month: the number of continuous months for moving average
    df: dataframe
    df_column: the column containing data
    """
    # get number of rows
    num_dates = df.shape[0]

    ma_forecasts = np.zeros(num_dates)

    for idx in range(n_month, num_dates):
        ma = np.mean(df_column[idx-n_month:idx])
        ma_forecasts[idx] = ma
    return ma_forecasts

# Cell
def mad(n_month, predicted, target):
    """Mean absolute deviation"""
    abs_deviations = [abs(predicted[i] - target[i]) for i in range(n_month, len(predicted))]
    return np.mean(abs_deviations)

def mse(n_month, predicted, target):
    """Mean squared error"""
    squared_errors = [(predicted[i] - target[i])**2 for i in range(n_month, len(predicted))]
    return np.mean(squared_errors)

def rmse(n_month, predicted, target):
    """Root mean squared error"""
    return math.sqrt(mse(n_month, predicted, target))

def mape(n_month, predicted, target):
    """Mean abosolute percentage error (in %)"""
    abs_percent = [abs(predicted[i] - target[i]) / target[i] * 100 for i in range(n_month, len(predicted))]
    return np.mean(abs_percent)

# Cell
def cumulative_error(n_month, predicted, target):
    errors = [target[i] - predicted[i] for i in range(n_month, len(predicted))]
    return np.cumsum(errors)

# Cell
def change_in_variable(n_month, target):
    return [target[i] - target[i-1] for i in range(n_month+1, len(target))]

def change_in_forecast(n_month, predicted):
    return [predicted[i] - predicted[i-1] for i in range(n_month+1, len(predicted))]

# Cell
def turning_point_graph(n_month, change_in_variable, change_in_forecast):
    fig, ax = plt.subplots()
    ax.axhline(y=0, color='k', lw=1)
    ax.axvline(x=0, color='k', lw=1)
    ax.axline([0, 0], [1, 1], color='r', lw=1.5)
    ax.scatter(change_in_forecast, change_in_variable, s=1)
    plt.xlabel("Forecast Change")
    plt.ylabel("Actual Change")
    plt.title(f"turning point graph - {n_month} month")
    plt.show()